Execute o comando git branch para visualizar que apenas a branch main existe em seu repositório local;
Com o comando git switch -c {nome_da_branch}, crie uma nova branch. Nela você pode adicionar novos commits;
Após adicionar os commits na nova branch, volte para a main com git switch main;
Adicione novos commits na main simulando uma nova funcionalidade que foi mesclada;
Volte para a sua branch criada no Passo 2 e a atualize com git rebase main. Isso aplicará os novos commits da main no início dessa branch;
Volte para a main e mescle o trabalho com o git merge. Se quiser forçar um merge commit, mesmo sendo possível realizar o fast forward, 

execute git merge --no-ff {nome_da_branch}.

deletando uma branch remota: git push origin :movendo (nome da branch)

Portanto, o git stash guarda uma alteração para que ela possa ser retomada depois.
git stash push -m "Movendo chamada de função"
$ git stash list
stash@{0}: WIP on movendo-detalhes: c53eb16 Quebrando linha do script
stash@{1}: WIP on main: c53eb16 Quebrando linha do script
$
git stash pop
git stash clear

Os comandos pop, drop e apply do git stash possuem semelhanças e diferenças bem importantes, 
então vamos fazer um pequeno resumo de suas funcionalidades aqui:

Apply
O comando git stash apply espera um índice de um item na stash e o aplica ao repositório, 
porém, esse comando não remove o item da stash, ou seja, se após executar o comando git stash apply 1 
você executar git stash list, o item referente ao índice 1 continuará na stash.

Pop
O git stash pop faz exatamente a mesma coisa que o git stash apply, porém, além de aplicar o item da stash, 
ele também o remove de lá. Esse comando, sem nenhum parâmetro extra, vai aplicar o último item adicionado à stash, 
mas nós também podemos informar um índice para ele, como git stash pop 1.

Drop
O git stash drop funciona exatamente como o pop, mas com uma simples diferença: ele apenas remove o item da stash, 
sem aplicá-lo em nosso repositório. Dessa forma, git stash drop remove o último item adicionado à stash, 
enquanto o git stash drop 1 remove da stash o item com índice 1.

E o git restore é um dos comandos que veio para substituir o git checkout. Então, o git checkout, 
como dissemos, faz muitas coisas. Uma das coisas que ele fazia é o restore. Com o git checkout -- ., temos o mesmo resultado.

O que podemos fazer? Podemos copiar o hash do commit, fazer o git restore --source = e colá-lo em seguida. 
Queremos restaurar para esse estado nosso index.html. O comando inteiro ficará parecido com o seguinte:

git restore --source = 5081a55bc92af2917c8519f16a7412b86ba3b1c2 index.html